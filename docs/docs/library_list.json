{"libraries":[{"name":"dart-core","qualifiedName":"dart-core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>","packageName":""},{"name":"unscripted","qualifiedName":"unscripted/unscripted","preview":"<p>Design command line interfaces through normal programming interfaces\nannotated with command line specific metadata.</p>","packageName":"unscripted","packageIntro":"<h1>unscripted</h1>\n<p><a href=\"https://drone.io/github.com/seaneagan/unscripted/latest\">!<a href=\"https://drone.io/github.com/seaneagan/unscripted/status.png\">Build Status</a></a></p>\n<p>Unscripted is a <a href=\"http://pub.dartlang.org/packages/unscripted\">pub package</a> for declarative command-line interface\nprogramming in dart.  Command-line interfaces are defined using ordinary method\nand class declarations, minimally annotated with command-line metadata.  \nReflection is used to derive the command-line interface from the declarations.  \nCommand-line arguments are automatically injected into the method or\nclass (constructor).  This removes the need for boilerplate logic to define, \nparse, validate and assign variables for command-line arguments.  Since the \ninterface is defined in code, standard refactoring, testing, etc. tools can \nbe used.</p>\n<h2>Demo</h2>\n<p><a href=\"https://github.com/seaneagan/unscripted/blob/master/example/cat.dart\">cat.dart</a> is a complete implementation of the *nix <code>cat</code> \nutility using unscripted.</p>\n<h2>Usage</h2>\n<p>(For more detailed usage, see the <a href=\"https://seaneagan.github.com/unscripted/unscripted.html\">API docs</a>)</p>\n<p>A simple script to output a greeting:</p>\n<pre class=\"dart\"><code>import 'package:unscripted/unscripted.dart';\n\nmain(arguments) =&gt; declare(greet).execute(arguments);\n\n@Command(help: 'Outputs a greeting')\n@ArgExample('--salutation Welcome --exclaim Bob', help: 'enthusiastic')\ngreet(\n    @Rest(help: \"Name(s) to greet\")\n    List&lt;String&gt; who, // A rest parameter, must be last positional.\n    {String salutation : 'Hello', // An option, use `@Option(...)` for metadata.\n     bool exclaim : false}) { // A flag, use `@Flag(...)` for metadata.\n\n  print('$salutation ${who.join(' ')}${exclaim ? '!' : ''}');\n\n}\n</code></pre>\n<p>(Compare to a <a href=\"https://github.com/seaneagan/unscripted/tree/master/example/old_greet.dart\">traditiional version</a> of this script.)</p>\n<p>We can call this script as follows:</p>\n<pre class=\"shell\"><code>$ dart greet.dart Bob\nHello Bob\n$ dart greet.dart --salutation Welcome --exclaim Bob\nWelcome Bob!\n</code></pre>\n<h3>Automatic --help</h3>\n<p>Unscripted automatically defines and handles a --help/-h option,\nallowing for:</p>\n<pre class=\"shell\"><code>$ dart greet.dart --help\nOutputs a greeting\n\nUsage:\n\ndart greet.dart [options] WHO...\n\nOptions:\n\n-h, --help            Print this usage information.\n    --salutation      (defaults to \"Hello\")\n    --[no-]exclaim\n\nExamples:\n\ndart greet.dart --salutation Welcome --exclaim Bob # enthusiastic\n</code></pre>\n<h3>Sub-Commands</h3>\n<p>Sub-commands are also supported.  In this case the script is defined as a\nclass, whose instance methods can be annotated as sub-commands.  Assume we have\nthe following 'server.dart':</p>\n<pre class=\"dart\"><code>import 'package:unscripted/unscripted.dart';\n\nmain(arguments) =&gt; declare(Server).execute(arguments);\n\nclass Server {\n\n  final String configPath;\n\n  @Command(help: 'Manages a server')\n  Server({this.configPath: 'config.xml'});\n\n  @SubCommand(help: 'Start the server')\n  start({bool clean}) {\n    print('''\nStarting the server.\nConfig path: $configPath''');\n  }\n\n  @SubCommand(help: 'Stop the server')\n  stop() {\n    print('Stopping the server.');\n  }\n\n}\n</code></pre>\n<p>We can call this script as follows:</p>\n<pre class=\"shell\"><code>$ dart server.dart start --config-path my-config.xml --clean\nStarting the server.\nConfig path: my-config.xml\n</code></pre>\n<p>A 'help' sub-command is also added, which can be used as a synonym for '--help',\nwhich outputs all the basic help info <em>plus</em> a list of available commands:</p>\n<pre class=\"shell\"><code>$ dart server.dart help\nAvailable commands:\n\n  start\n  help\n  stop\n\nUse \"dart server.dart help [command]\" for more information about a command.\n</code></pre>\n<p>and as indicated there, sub-command help is also available:</p>\n<pre class=\"shell\"><code>$ dart server.dart help stop\nStop the server\n\nUsage:\n\ndart server.dart stop [options]\n\nOptions:\n\n-h, --help    Print this usage information.\n</code></pre>\n<p><a href=\"https://bitdeli.com/free\" title=\"Bitdeli Badge\">!<a href=\"https://d2weczhvl823v0.cloudfront.net/seaneagan/unscripted/trend.png\">Bitdeli Badge</a></a></p>"}],"introduction":"","filetype":"json"}