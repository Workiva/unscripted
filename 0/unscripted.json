{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"dart:convert","id":"dart.convert","comment":"\nConverters for JSON and UTF-8, as well as support for creating additional\nconverters.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"StreamTransformer","refId":"dart.async/StreamTransformer"}],"kind":"class","name":"Converter","id":"Converter","comment":"\nA [Converter] converts data from one representation into another.\n\n*Converters are still experimental and are subject to change without notice.*\n\n","children":[{"returnType":{"name":"T","refId":"dart.convert/Converter/T"},"kind":"method","name":"convert","id":"convert1()","comment":"\nConverts [input] and returns the result of the conversion.\n","children":[{"ref":{"name":"S","refId":"dart.convert/Converter/S"},"kind":"param","name":"input","id":"input"}],"line":"19"},{"returnType":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"S","refId":"dart.convert/Converter/S"}]},"kind":"method","name":"fuse","id":"fuse1()","comment":"\nFuses `this` with [other].\n\nEncoding with the resulting converter is equivalent to converting with\n`this` before converting with `other`.\n","children":[{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"T","refId":"dart.convert/Converter/T"}]},"kind":"param","name":"other","id":"other"}],"line":"27"},{"returnType":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","comment":"\nStarts a chunked conversion.\n","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink"},"kind":"param","name":"sink","id":"sink"}],"line":"34"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream"},"kind":"param","name":"source","id":"source"}],"line":"40"},{"kind":"constructor","name":"","id":"0()","line":"14"},{"kind":"typeparam","name":"S","id":"S"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/convert/converter.dart","line":"13"}],"uri":"dart-sdk/lib/convert/convert.dart","line":"9"},{"kind":"library","name":"dart:async","id":"dart.async","comment":"\nSupport for asynchronous programming,\nwith classes such as Future and Stream.\n\nFor an introduction to asynchronous programming in Dart, see the\n[dart:async section of the language tour]\n(https://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-asynchronous-programming).\n\n## Other resources\n\n* [Using Future Based APIs]\n(https://www.dartlang.org/articles/using-future-based-apis/): A first look at\nFutures and how to use them to write asynchronous Dart code.\n\n* [Futures and Error Handling]\n(https://www.dartlang.org/articles/futures-and-error-handling/): Everything\nyou wanted to know about handling errors and exceptions when working with\nFutures (but were afraid to ask).\n\n* [The Event Loop and Dart](https://www.dartlang.org/articles/event-loop/):\nLearn how Dart handles the event queue and microtask queue, so you can write\nbetter asynchronous code with fewer surprises.\n\n* [Asynchronous Unit Testing with Dart]\n(https://www.dartlang.org/articles/dart-unit-tests/#asynchronous-tests): How\nto test asynchronous code.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"StreamTransformer","id":"StreamTransformer","comment":"\nThe target of a [Stream.transform] call.\n\nThe [Stream.transform] call will pass itself to this object and then return\nthe resulting stream.\n\nIt is good practice to write transformers that can be used multiple times.\n","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"}]},"kind":"param","name":"stream","id":"stream"}],"line":"1176"},{"returnType":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"},{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"constructor","name":"","id":"1()","comment":"\nCreates a [StreamTransformer].\n\nThe returned instance takes responsibility of implementing ([bind]).\nWhen the user invokes `bind` it returns a new \"bound\" stream. Only when\nthe user starts listening to the bound stream, the `listen` method\ninvokes the given closure [transformer].\n\nThe [transformer] closure receives the stream, that was bound, as argument\nand returns a [StreamSubscription]. In almost all cases the closure\nlistens itself to the stream that is given as argument.\n\nThe result of invoking the [transformer] closure is a [StreamSubscription].\nThe bound stream-transformer (created by the `bind` method above) then sets\nthe handlers it received as part of the `listen` call.\n\nConceptually this can be summarized as follows:\n\n1. `var transformer = new StreamTransformer(transformerClosure);`\n  creates a `StreamTransformer` that supports the `bind` method.\n2. `var boundStream = stream.transform(transformer);` binds the `stream`\n  and returns a bound stream that has a pointer to `stream`.\n3. `boundStream.listen(f1, onError: f2, onDone: f3, cancelOnError: b)`\n  starts the listening and transformation. This is accomplished\n  in 2 steps: first the `boundStream` invokes the `transformerClosure` with\n  the `stream` it captured: `transformerClosure(stream, b)`.\n  The result `subscription`, a [StreamSubscription], is then\n  updated to receive its handlers: `subscription.onData(f1)`,\n  `subscription.onError(f2)`, `subscription(f3)`. Finally the subscription\n  is returned as result of the `listen` call.\n\nThere are two common ways to create a StreamSubscription:\n\n1. by creating a new class that implements [StreamSubscription].\n   Note that the subscription should run callbacks in the [Zone] the\n   stream was listened to.\n2. by allocating a [StreamController] and to return the result of\n   listening to its stream.\n\nExample use of a duplicating transformer:\n\n    stringStream.transform(new StreamTransformer<String, String>(\n        (Stream<String> input, bool cancelOnError) {\n          StreamController<String> controller;\n          StreamSubscription<String> subscription;\n          controller = new StreamController<String>(\n            onListen: () {\n              subscription = input.listen((data) {\n                  // Duplicate the data.\n                  controller.add(data);\n                  controller.add(data);\n                },\n                onError: controller.addError,\n                onDone: controller.close,\n                cancelOnError: cancelOnError);\n            },\n            onPause: subscription.pause,\n            onResume: subscription.resume,\n            onCancel: subscription.cancel,\n            sync: true);\n          return controller.stream.listen(null);\n        });\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"transformer","id":"transformer","children":[{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"}]},"kind":"param","name":"stream","id":"stream","uri":"dart-sdk/lib/async/stream.dart","line":"1156"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"cancelOnError","id":"cancelOnError","uri":"dart-sdk/lib/async/stream.dart","line":"1156"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1156"}],"line":"1155"},{"returnType":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"},{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"constructor","name":"fromHandlers","id":"fromHandlers3()","comment":"\nCreates a [StreamTransformer] that delegates events to the given functions.\n\nExample use of a duplicating transformer:\n\n    stringStream.transform(new StreamTransformer<String, String>.fromHandlers(\n        handleData: (String value, EventSink<String> sink) {\n          sink.add(value);\n          sink.add(value);  // Duplicate the incoming events.\n        }));\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"handleData","id":"handleData","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"S","refId":"dart.async/StreamTransformer/S"},"kind":"param","name":"data","id":"data","uri":"dart-sdk/lib/async/stream.dart","line":"1171"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"param","name":"sink","id":"sink","uri":"dart-sdk/lib/async/stream.dart","line":"1171"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1171"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"handleError","id":"handleError","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"error","id":"error","uri":"dart-sdk/lib/async/stream.dart","line":"1172"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"param","name":"stackTrace","id":"stackTrace","uri":"dart-sdk/lib/async/stream.dart","line":"1172"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"param","name":"sink","id":"sink","uri":"dart-sdk/lib/async/stream.dart","line":"1172"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1172"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"handleDone","id":"handleDone","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"param","name":"sink","id":"sink","uri":"dart-sdk/lib/async/stream.dart","line":"1173"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1173"}],"line":"1170"},{"kind":"typeparam","name":"S","id":"S"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/async/stream.dart","line":"1090"}],"uri":"dart-sdk/lib/async/async.dart","line":"32"}],"kind":"library","id":"unscripted","comment":"Flip the (command line) script.","children":[{"returnType":{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"},"kind":"method","name":"_getUnnamedConstructor","id":"_getUnnamedConstructor1()","children":[{"ref":{"name":"ClassMirror","refId":"dart.mirrors/ClassMirror"},"kind":"param","name":"classMirror","id":"classMirror"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"240"},{"kind":"method","name":"_getRestParameterIndex","id":"_getRestParameterIndex1()","children":[{"ref":{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"},"kind":"param","name":"methodMirror","id":"methodMirror"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"233"},{"returnType":{"name":"List","refId":"dart.core/List"},"kind":"method","name":"_getPositionalParameterInfo","id":"_getPositionalParameterInfo1()","children":[{"ref":{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"},"kind":"param","name":"methodMirror","id":"methodMirror"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"206"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"_getHelpPath","id":"_getHelpPath1()","children":[{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"param","name":"results","id":"results"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"187"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addArgToParser","id":"_addArgToParser4()","children":[{"ref":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"param","name":"parser","id":"parser"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"kind":"param","name":"defaultValue","id":"defaultValue"},{"ref":{"name":"_Arg","refId":"unscripted/_Arg"},"kind":"param","name":"arg","id":"arg"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"135"},{"kind":"method","name":"_getFirstMetadataMatch","id":"_getFirstMetadataMatch2()","children":[{"ref":{"name":"DeclarationMirror","refId":"dart.mirrors/DeclarationMirror"},"kind":"param","name":"declaration","id":"declaration"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"match","id":"match","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"metadata","id":"metadata","uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"129"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"129"},{"kind":"method","name":"_addCommandMetadata","id":"_addCommandMetadata2()","children":[{"ref":{"name":"Usage","refId":"unscripted/Usage"},"kind":"param","name":"usage","id":"usage"},{"ref":{"name":"DeclarationMirror","refId":"dart.mirrors/DeclarationMirror"},"kind":"param","name":"declaration","id":"declaration"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"116"},{"returnType":{"name":"Usage","refId":"unscripted/Usage"},"kind":"method","name":"_getUsageFromClass","id":"_getUsageFromClass1()","children":[{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"param","name":"theClass","id":"theClass"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"71"},{"returnType":{"name":"Usage","refId":"unscripted/Usage"},"kind":"method","name":"_getUsageFromFunction","id":"_getUsageFromFunction2()","children":[{"ref":{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"},"kind":"param","name":"methodMirror","id":"methodMirror"},{"ref":{"name":"Usage","refId":"unscripted/Usage"},"isOptional":true,"isNamed":true,"kind":"param","name":"usage","id":"usage"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"17"},{"returnType":{"name":"Rest","refId":"unscripted/Rest"},"kind":"method","name":"_getRestFromMethod","id":"_getRestFromMethod1()","children":[{"ref":{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"},"kind":"param","name":"method","id":"method"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"6"},{"kind":"method","name":"improvise","id":"improvise1()","children":[{"kind":"param","name":"model","id":"model"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/script.dart","line":"4"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_HELP","id":"_HELP","isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/util.dart","line":"4"},{"superclass":{"name":"UsageFormatter","refId":"unscripted/UsageFormatter"},"kind":"class","name":"TerminalUsageFormatter","id":"TerminalUsageFormatter","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format","id":"format0()","line":"18"},{"kind":"method","name":"_formatExample","id":"_formatExample1()","children":[{"ref":{"name":"ArgExample","refId":"unscripted/ArgExample"},"kind":"param","name":"example","id":"example"}],"isPrivate":true,"line":"70"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_formatRootCommand","id":"_formatRootCommand0()","isPrivate":true,"line":"78"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_formatCommands","id":"_formatCommands0()","isPrivate":true,"line":"83"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_formatBlock","id":"_formatBlock2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"title","id":"title"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"content","id":"content"}],"isPrivate":true,"line":"86"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Usage","refId":"unscripted/Usage"},"kind":"param","name":"usage","id":"usage"}],"line":"16"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/usage_formatter.dart","line":"14"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"UsageFormatter","id":"UsageFormatter","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format","id":"format0()","line":"8"},{"ref":{"name":"Usage","refId":"unscripted/Usage"},"isFinal":true,"kind":"variable","name":"usage","id":"usage","line":"6"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Usage","refId":"unscripted/Usage"},"initializedField":{"name":"usage","refId":"unscripted/UsageFormatter/usage"},"kind":"param","name":"usage","id":"usage"}],"line":"10"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/usage_formatter.dart","line":"4"},{"superclass":{"name":"Usage","refId":"unscripted/Usage"},"kind":"class","name":"_SubCommandUsage","id":"_SubCommandUsage","children":[{"returnType":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"method","name":"_getParser","id":"_getParser0()","isPrivate":true,"line":"123"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"commandPath","id":"commandPath","line":"116"},{"ref":{"name":"Usage","refId":"unscripted/Usage"},"isFinal":true,"kind":"variable","name":"parent","id":"parent","line":"110"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_subCommandName","id":"_subCommandName","isPrivate":true,"line":"111"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"_path","id":"_path","isPrivate":true,"line":"115"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Usage","refId":"unscripted/Usage"},"initializedField":{"name":"parent","refId":"unscripted/_SubCommandUsage/parent"},"kind":"param","name":"parent","id":"parent"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_subCommandName","refId":"unscripted/_SubCommandUsage/_subCommandName"},"kind":"param","name":"_subCommandName","id":"_subCommandName","isPrivate":true}],"line":"113"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/usage.dart","line":"108"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Usage","id":"Usage","comment":"Adds a standard --help (-h) option to [parser].\nIf [parser] has any sub-commands also add a help sub-command,\nand recursively add help to all sub-commands' parsers.","children":[{"returnType":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"method","name":"_getParser","id":"_getParser0()","isPrivate":true,"line":"26"},{"kind":"method","name":"addPositional","id":"addPositional1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"help","id":"help"}],"line":"32"},{"kind":"method","name":"_addHelpFlag","id":"_addHelpFlag1()","children":[{"ref":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"param","name":"parser","id":"parser"}],"isPrivate":true,"line":"45"},{"kind":"method","name":"addExample","id":"addExample1()","children":[{"ref":{"name":"ArgExample","refId":"unscripted/ArgExample"},"kind":"param","name":"example","id":"example"}],"line":"60"},{"returnType":{"name":"Usage","refId":"unscripted/Usage"},"kind":"method","name":"addCommand","id":"addCommand1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"64"},{"returnType":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"method","name":"validate","id":"validate1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"arguments","id":"arguments"}],"line":"74"},{"kind":"method","name":"_checkResults","id":"_checkResults1()","children":[{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"param","name":"results","id":"results"}],"isPrivate":true,"line":"82"},{"ref":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"property","name":"parser","id":"parser","comment":"The parser associated with this usage.","line":"20"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Positional","refId":"unscripted/Positional"}]},"kind":"property","name":"positionals","id":"positionals","line":"38"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"commandPath","id":"commandPath","line":"56"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"description","id":"description","comment":"A simple description of what this script does, for use in help text.","line":"10"},{"ref":{"name":"Rest","refId":"unscripted/Rest"},"kind":"variable","name":"rest","id":"rest","line":"12"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"kind":"variable","name":"callStyle","id":"callStyle","line":"14"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_allowTrailingOptions","id":"_allowTrailingOptions","isPrivate":true,"line":"17"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Positional","refId":"unscripted/Positional"}]},"kind":"variable","name":"_positionals","id":"_positionals","isPrivate":true,"line":"36"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Positional","refId":"unscripted/Positional"}]},"kind":"variable","name":"_positionalsView","id":"_positionalsView","isPrivate":true,"line":"37"},{"ref":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"variable","name":"_parser","id":"_parser","isPrivate":true,"line":"52"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ArgExample","refId":"unscripted/ArgExample"}]},"kind":"variable","name":"examples","id":"examples","line":"57"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Usage","refId":"unscripted/Usage"}]},"kind":"variable","name":"commands","id":"commands","line":"58"},{"kind":"constructor","name":"","id":"0()","line":"54"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/usage.dart","line":"7"},{"superclass":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"ArgResults","refId":"args/ArgResults"},{"name":"Invocation","refId":"dart.core/Invocation"}]},"kind":"class","name":"ArgResultsToInvocationConverter","id":"ArgResultsToInvocationConverter","children":[{"returnType":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"method","name":"convert","id":"convert1()","children":[{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"param","name":"results","id":"results"}],"line":"30"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_restParameterIndex","id":"_restParameterIndex","isPrivate":true,"line":"25"},{"ref":{"name":"Symbol","refId":"dart.core/Symbol"},"isFinal":true,"kind":"variable","name":"memberName","id":"memberName","line":"26"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_restParameterIndex","refId":"unscripted/ArgResultsToInvocationConverter/_restParameterIndex"},"kind":"param","name":"_restParameterIndex","id":"_restParameterIndex","isPrivate":true},{"ref":{"name":"Symbol","refId":"dart.core/Symbol"},"defaultValue":"#call","isOptional":true,"isNamed":true,"initializedField":{"name":"memberName","refId":"unscripted/ArgResultsToInvocationConverter/memberName"},"kind":"param","name":"memberName","id":"memberName"}],"line":"28"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/args_codec.dart","line":"23"},{"superclass":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"Invocation","refId":"dart.core/Invocation"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]}]},"kind":"class","name":"InvocationToArgsConverter","id":"InvocationToArgsConverter","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"convert","id":"convert1()","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"input","id":"input"}],"line":"8"},{"kind":"constructor","name":"","id":"0()","line":"6"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/args_codec.dart","line":"4"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"CallStyle","id":"CallStyle","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatCommand","id":"formatCommand1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"command","id":"command"}],"line":"16"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"26"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"_example","id":"_example","isPrivate":true,"line":"24"},{"isStatic":true,"kind":"variable","name":"_EXAMPLE_COMMAND","id":"_EXAMPLE_COMMAND","isPrivate":true,"line":"6"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_name","id":"_name","isPrivate":true,"line":"8"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isStatic":true,"kind":"variable","name":"NORMAL","id":"NORMAL","line":"10"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isStatic":true,"kind":"variable","name":"SHEBANG","id":"SHEBANG","line":"11"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isStatic":true,"kind":"variable","name":"SHELL","id":"SHELL","line":"12"},{"kind":"constructor","name":"_","id":"_1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_name","refId":"unscripted/CallStyle/_name"},"kind":"param","name":"_name","id":"_name","isPrivate":true}],"isPrivate":true,"line":"14"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/call_style.dart","line":"4"},{"superclass":{"name":"_BaseCommand","refId":"unscripted/_BaseCommand"},"kind":"class","name":"SubCommand","id":"SubCommand","comment":"An annotation which can be used on a class to mark it as representing a\nscript command.","children":[{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"93"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/annotations.dart","line":"92"},{"superclass":{"name":"_BaseCommand","refId":"unscripted/_BaseCommand"},"kind":"class","name":"Command","id":"Command","comment":"An annotation which marks a class as representing a script command.","children":[{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isFinal":true,"kind":"variable","name":"callStyle","id":"callStyle","line":"85"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isOptional":true,"isNamed":true,"initializedField":{"name":"callStyle","refId":"unscripted/Command/callStyle"},"kind":"param","name":"callStyle","id":"callStyle"}],"line":"87"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/annotations.dart","line":"84"},{"superclass":{"name":"_Help","refId":"unscripted/_Help"},"kind":"class","name":"_BaseCommand","id":"_BaseCommand","children":[{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"80"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/annotations.dart","line":"79"},{"superclass":{"name":"_Help","refId":"unscripted/_Help"},"kind":"class","name":"Rest","id":"Rest","comment":"An annotation which marks the last positional parameter of a method\nas a rest argument.  If the parameter has a type annotation,\nit should be `List` or `List<String>`.","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"min","id":"min","line":"74"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"isNamed":true,"initializedField":{"name":"min","refId":"unscripted/Rest/min"},"kind":"param","name":"min","id":"min"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"76"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/annotations.dart","line":"72"},{"superclass":{"name":"_Help","refId":"unscripted/_Help"},"kind":"class","name":"Positional","id":"Positional","comment":"An annotation for specifying metadata about positional command line\nparameters.","children":[{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"66"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/annotations.dart","line":"65"},{"superclass":{"name":"_Help","refId":"unscripted/_Help"},"kind":"class","name":"ArgExample","id":"ArgExample","comment":"An annotation which gives an example of arguments that can be passed to a\ncommand, along with help text for the example.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"example","id":"example","line":"58"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"example","refId":"unscripted/ArgExample/example"},"kind":"param","name":"example","id":"example"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"60"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/annotations.dart","line":"56"},{"superclass":{"name":"_Arg","refId":"unscripted/_Arg"},"kind":"class","name":"Flag","id":"Flag","comment":"An annotation to use on named method parameters,\nmarking them as command line flags.\n\nSee the corresponding method parameters to [ArgParser.addFlag]\nfor descriptions of the fields.","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"negatable","id":"negatable","line":"45"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help","line":"48"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"abbr","id":"abbr","line":"49"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"initializedField":{"name":"negatable","refId":"unscripted/Flag/negatable"},"kind":"param","name":"negatable","id":"negatable","line":"50"}],"line":"47"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/annotations.dart","line":"44"},{"superclass":{"name":"_Arg","refId":"unscripted/_Arg"},"kind":"class","name":"Option","id":"Option","comment":"An annotation to use on named method parameters,\nmarking them as command line options.\n\nSee the corresponding method parameters to [ArgParser.addOption]\nfor descriptions of the fields.","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"allowed","id":"allowed","line":"24"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"allowedHelp","id":"allowedHelp","line":"25"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"allowMultiple","id":"allowMultiple","line":"26"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"hide","id":"hide","line":"27"},{"kind":"constructor","name":"","id":"6()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help","line":"30"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"abbr","id":"abbr","line":"31"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"initializedField":{"name":"allowed","refId":"unscripted/Option/allowed"},"kind":"param","name":"allowed","id":"allowed","line":"32"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"initializedField":{"name":"allowedHelp","refId":"unscripted/Option/allowedHelp"},"kind":"param","name":"allowedHelp","id":"allowedHelp","line":"33"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"initializedField":{"name":"allowMultiple","refId":"unscripted/Option/allowMultiple"},"kind":"param","name":"allowMultiple","id":"allowMultiple","line":"34"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"initializedField":{"name":"hide","refId":"unscripted/Option/hide"},"kind":"param","name":"hide","id":"hide","line":"35"}],"line":"29"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/annotations.dart","line":"23"},{"superclass":{"name":"_Help","refId":"unscripted/_Help"},"kind":"class","name":"_Arg","id":"_Arg","comment":"A base class for script argument annotations.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"abbr","id":"abbr","line":"13"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"initializedField":{"name":"abbr","refId":"unscripted/_Arg/abbr"},"kind":"param","name":"abbr","id":"abbr"}],"line":"15"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/annotations.dart","line":"12"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_Help","id":"_Help","comment":"A base class for script annotations which include help.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"help","id":"help","line":"6"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"initializedField":{"name":"help","refId":"unscripted/_Help/help"},"kind":"param","name":"help","id":"help"}],"line":"8"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/annotations.dart","line":"5"},{"superclass":{"name":"_DeclarationScript","refId":"unscripted/_DeclarationScript"},"kind":"class","name":"ClassScript","id":"ClassScript","comment":"A [Script] whose interface and behavior is defined by a class.\n\nThe class must have an unnamed constructor, and it's parameters define the\ntop-level options for this script.  Methods of the class can be annotated\nas [SubCommand]s.  The parameters of these methods define the sub-command's\noptions.\n\nWhen [execute]d, the base command line arguments (before the command)\nare injected into their corresponding constructor arguments, to create\nan instance of the class.  Then, the method corresponding to the\nsub-command that was specified on the command line is invoked on the\ninstance.\n\nIf no sub-command was specified, then [onNoSubCommand] is invoked.","children":[{"kind":"method","name":"handleResults","id":"handleResults1()","children":[{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"param","name":"results","id":"results"}],"line":"152"},{"kind":"method","name":"defaultCommand","id":"defaultCommand1()","comment":"Called if no sub-command was provided.\n\nThe default implementation treats this as an error, and prints help\ninformation.","children":[{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"param","name":"results","id":"results"}],"line":"183"},{"ref":{"name":"ClassMirror","refId":"dart.mirrors/ClassMirror"},"kind":"property","name":"_declaration","id":"_declaration","isPrivate":true,"line":"143"},{"ref":{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"},"kind":"property","name":"_method","id":"_method","isPrivate":true,"line":"145"},{"ref":{"name":"Usage","refId":"unscripted/Usage"},"kind":"property","name":"usage","id":"usage","line":"147"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"variable","name":"_class","id":"_class","isPrivate":true,"line":"141"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Type","refId":"dart.core/Type"},"initializedField":{"name":"_class","refId":"unscripted/ClassScript/_class"},"kind":"param","name":"_class","id":"_class","isPrivate":true}],"line":"149"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/script.dart","line":"139"},{"superclass":{"name":"_DeclarationScript","refId":"unscripted/_DeclarationScript"},"kind":"class","name":"FunctionScript","id":"FunctionScript","comment":"A [Script] whose interface and behavior is defined by a [Function].\n\nThe function's parameters must be marked with a [bool] type annotation or a\n[Flag] metadata annotation to mark them as a flag, or with a [String] or\n[dynamic] type annotation or [Option] metadata annotation to mark them as an\noption.\n\nWhen [execute]d, the command line arguments are injected into their\ncorresponding function arguments.","children":[{"kind":"method","name":"handleResults","id":"handleResults1()","children":[{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"param","name":"results","id":"results"}],"line":"111"},{"ref":{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"},"kind":"property","name":"_declaration","id":"_declaration","isPrivate":true,"line":"101"},{"ref":{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"},"kind":"property","name":"_method","id":"_method","isPrivate":true,"line":"104"},{"ref":{"name":"Usage","refId":"unscripted/Usage"},"kind":"property","name":"usage","id":"usage","line":"106"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isFinal":true,"kind":"variable","name":"_function","id":"_function","isPrivate":true,"line":"99"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"initializedField":{"name":"_function","refId":"unscripted/FunctionScript/_function"},"kind":"param","name":"_function","id":"_function","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"description","id":"description"}],"line":"108"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/script.dart","line":"97"},{"superclass":{"name":"Script","refId":"unscripted/Script"},"isAbstract":true,"kind":"class","name":"_DeclarationScript","id":"_DeclarationScript","children":[{"ref":{"name":"DeclarationMirror","refId":"dart.mirrors/DeclarationMirror"},"kind":"property","name":"_declaration","id":"_declaration","isPrivate":true,"line":"81"},{"ref":{"name":"MethodMirror","refId":"dart.mirrors/MethodMirror"},"kind":"property","name":"_method","id":"_method","isPrivate":true,"line":"83"},{"kind":"constructor","name":"","id":"0()","line":"85"}],"isPrivate":true,"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/script.dart","line":"79"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Script","id":"Script","comment":"A wrapper around a command line script.\n\nAutomatically adds a `--help` option to the given [parser]:\n\n* `foo.dart --help`\n* `foo.dart -h`\n\n... and supports sub-commands as well:\n\n* `foo.dart help`\n* `foo.dart command --help`\n* `foo.dart help command`\n\nThe help output includes a [description].\n\nWhen the script is [execute]d, if invalid options are passed, it will\ndisplay the help information.  On script failure, the [exitCode] will be\nset to `1`.","children":[{"returnType":{"name":"UsageFormatter","refId":"unscripted/UsageFormatter"},"kind":"method","name":"getUsageFormatter","id":"getUsageFormatter1()","children":[{"ref":{"name":"Usage","refId":"unscripted/Usage"},"kind":"param","name":"usage","id":"usage"}],"line":"32"},{"kind":"method","name":"execute","id":"execute1()","comment":"Executes this script.\n\n* Parses the [arguments].\n* On success passes the [ArgResults] to [handleResults].\n* On failure, outputs the error and help information.","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"arguments","id":"arguments"}],"line":"40"},{"kind":"method","name":"handleResults","id":"handleResults1()","comment":"Handles successfully parsed [results].","children":[{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"param","name":"results","id":"results"}],"line":"58"},{"kind":"method","name":"_printHelp","id":"_printHelp1()","comment":"Prints help information for this script.","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"kind":"param","name":"commandPath","id":"commandPath"}],"isPrivate":true,"line":"62"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_checkHelp","id":"_checkHelp1()","children":[{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"param","name":"results","id":"results"}],"isPrivate":true,"line":"69"},{"ref":{"name":"Usage","refId":"unscripted/Usage"},"kind":"property","name":"usage","id":"usage","line":"30"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/src/script.dart","line":"28"}],"uri":"file:///home/ubuntu/src/github.com/seaneagan/unscripted/lib/unscripted.dart","line":"3"}