{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"package:unscripted/src/util.dart","id":"unscripted.src.util","children":[{"superclass":{"name":"Help","refId":"unscripted.src.util/Help"},"kind":"class","name":"BaseCommand","id":"BaseCommand","children":[{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"26"}],"line":"25"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Help","id":"Help","comment":"A base class for script annotations which include help.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"help","id":"help","comment":"The help text to include for this part of the command line interface.","line":"20"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"initializedField":{"name":"help","refId":"unscripted.src.util/Help/help"},"kind":"param","name":"help","id":"help"}],"line":"22"}],"line":"18"}],"uri":"package:unscripted/src/util.dart","line":"2"}],"kind":"library","name":"package:unscripted/unscripted.dart","id":"unscripted","comment":"Design command line interfaces through normal programming interfaces\nannotated with command line specific metadata.","children":[{"returnType":{"name":"Script","refId":"unscripted/Script"},"kind":"method","name":"declare","id":"declare1()","comment":"Declares a [Script] from [model].\n\nThe model is generally a closure of a method, which is annotated with\ncommand-line metadata.  The model can also be a class (see below).\n\nThe method itself can be annotated as a [Command].\n\nThe method's parameters define the script's command-line parameters.\nNamed parameters with [bool] type or [Flag] metadata represent command-line\nflags.  Other named parameters represent value-taking command-line options,\nand can accept [Option] metadata.  Required positional parameters are\nmapped to positional command-line parameters, and can use [Positional] metadata.\nOptional positional parameters are not allowed.  However, [Rest] metadata\ncan be placed on the last positional parameter to represent all remaining\npositional arguments passed to the script.\n\nAny value-taking argument (option, positional, rest) can have a \"parser\".\nThis is a function which is responsible for validating and/or transforming\nthe string value passed on the command-line before it is passed to the\nmethod.  Rest parsers are applied to each command-line value they receive.\nIf a parser throws an exception, it is `toString`ed and displayed to the\nuser\nParsers can be declared either via the `parser` field of the\nappropriate metadata (see above), or by giving the method parameter a type\nwhich has a static `parse` method that can be used as the parser.  For\nexample `int` parameters are parsed with `int.parse`.\n\nSub-commands can be added to the script by creating a class with instance\nmethods annotated as [SubCommand]s.  The model returns an instance of this\nclass and documents this in it's return type.  Most commonly the model is\na constructor of this class.  But since dart does\n[not yet](http://dartbug.com/10659) have syntax for closurizing constructors,\nthe model can be a class literal, to indicate to that the unnamed\nconstructor of the class is the actual model.\n\nHelp flags ('--help' / '-h') are automatically included.  If the script has\nsub-commands, a 'help' command is also included, which can be invoked bare,\n'help' as a synonym for '--help', or by specifying a sub-command e.g.\n'help sub-command'.\n\nWhen the returned script is [executed][Script.execute], if the user\nrequested help for, or incorrectly invoked, the command or a sub-command,\nthen the help text is displayed, along with any specific error.  Otherwise,\nthe command-line arguments are valid, and are injected into the\ncorresponding method parameters.  If the model has sub-commands, then if a\nsub-command was specified on the command-line, it is invoked with it's\ncorresponding command-line arguments, and so forth (recursively).  If a\nmodel has sub-commands, but no sub-command was specified, this is treated\nas an error, and the help text is displayed.\n\nBasic example:\n\n    main(arguments) => declare(greet).execute(arguments);\n\n    // Optional command-line metadata:\n    @Command(help: 'Outputs a greeting')\n    @ArgExample('--salutation Welcome --exclaim Bob', help: 'enthusiastic')\n    greet(\n        @Rest(help: \"Name(s) to greet\")\n        List<String> who, // A rest parameter, must be last positional.\n        {String salutation : 'Hello', // An option, use `@Option(...)` for metadata.\n         bool exclaim : false}) { // A flag, use `@Flag(...)` for metadata.\n\n      print('$salutation ${who.join(' ')}${exclaim ? '!' : ''}');\n\n    }\n\nSub-command example:\n\n    main(arguments) => declare(Server).execute(arguments);\n\n    class Server {\n\n      final String configPath;\n\n      @Command(help: 'Manages a server')\n      Server({this.configPath: 'config.xml'});\n\n      @SubCommand(help: 'Start the server')\n      start({bool clean}) {\n        print('''\n    Starting the server.\n    Config path: $configPath''');\n      }\n\n      @SubCommand(help: 'Stop the server')\n      stop() {\n        print('Stopping the server.');\n      }\n\n    }\n\nCommands and SubCommands can also be annotated with [ArgExample]s, to\ndocument, in the help text, example arguments that they can receive.\n\nParameter and command names which are camelCased are mapped to their\ndash-erized command-line equivalents.  For example, `fooBar` would map to\n`foo-bar`.","children":[{"kind":"param","name":"model","id":"model"}],"uri":"package:unscripted/src/script.dart","line":"102"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Output","id":"Output","comment":"Represents a script output, either [stdout] or a file.","children":[{"returnType":{"name":"Output","refId":"unscripted/Output"},"isStatic":true,"kind":"method","name":"parse","id":"parse1()","comment":"Returns an output which represents [stdout] if [output] is '-',\nor a file if [output] is a valid file path, else throws.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"arg","id":"arg"}],"line":"29"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"path","id":"path","comment":"Returns the file path for files, `null` for [stdout].","line":"32"},{"ref":{"name":"IOSink","refId":"dart.io/IOSink"},"kind":"property","name":"sink","id":"sink","comment":"Either [stdout] itself, or the result of [File.openWrite] for files.","line":"35"}],"uri":"package:unscripted/src/io.dart","line":"25"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Input","id":"Input","comment":"Represents a script input, either [stdin] or a file.","children":[{"returnType":{"name":"Input","refId":"unscripted/Input"},"isStatic":true,"kind":"method","name":"parse","id":"parse1()","comment":"Returns an input representing [stdin] if [arg] is '-',\nor a file if [arg] is a valid file path, else throws.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"arg","id":"arg"}],"line":"9"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"path","id":"path","comment":"Returns the file path for files, `null` for [stdin].","line":"12"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"text","id":"text","comment":"The full input text.","line":"15"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"lines","id":"lines","comment":"The lines of the input, newlines are not retained.","line":"18"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"property","name":"stream","id":"stream","comment":"A stream of the input content.","line":"21"}],"uri":"package:unscripted/src/io.dart","line":"5"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"CallStyle","id":"CallStyle","comment":"How the command is called on the command line.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_name","id":"_name","isPrivate":true,"line":"7"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isStatic":true,"kind":"variable","name":"NORMAL","id":"NORMAL","comment":"Called with the dart executable.\nExample:\n    dart foo.dart ...","line":"12"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isStatic":true,"kind":"variable","name":"SHEBANG","id":"SHEBANG","comment":"Called without the dart executable, such as by including a shebang\nat the beginning of the script.\nExample:\n    foo.dart ...","line":"17"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isStatic":true,"kind":"variable","name":"SHELL","id":"SHELL","comment":"Called without the '.dart' file extension, similar to a shell command.\nExample:\n    foo ...","line":"21"},{"kind":"constructor","name":"_","id":"_1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_name","refId":"unscripted/CallStyle/_name"},"kind":"param","name":"_name","id":"_name","isPrivate":true}],"isPrivate":true,"line":"23"}],"uri":"package:unscripted/src/call_style.dart","line":"5"},{"superclass":{"name":"BaseCommand","refId":"unscripted.src.util/BaseCommand"},"kind":"class","name":"SubCommand","id":"SubCommand","comment":"An annotation which marks an instance method of a [Command] as a\nsub-command.","children":[{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"105"}],"uri":"package:unscripted/src/annotations.dart","line":"104"},{"superclass":{"name":"BaseCommand","refId":"unscripted.src.util/BaseCommand"},"kind":"class","name":"Command","id":"Command","comment":"An annotation which marks a class as representing a script command.","children":[{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isFinal":true,"kind":"variable","name":"callStyle","id":"callStyle","line":"97"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isOptional":true,"isNamed":true,"initializedField":{"name":"callStyle","refId":"unscripted/Command/callStyle"},"kind":"param","name":"callStyle","id":"callStyle"}],"line":"99"}],"uri":"package:unscripted/src/annotations.dart","line":"96"},{"superclass":{"name":"Positional","refId":"unscripted/Positional"},"kind":"class","name":"Rest","id":"Rest","comment":"An annotation which marks the last positional parameter of a method\nas a rest argument.  If the parameter has a type annotation,\nit should be `List` or `List<String>`.","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"required","id":"required","comment":"The minimum amount of arguments that should be passed to the rest\nparameter to avoid an error being thrown.","line":"89"},{"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"parser","id":"parser","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"arg","id":"arg","uri":"package:unscripted/src/annotations.dart","line":"91"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"initializedField":{"name":"required","refId":"unscripted/Rest/required"},"kind":"param","name":"required","id":"required"}],"line":"91"}],"uri":"package:unscripted/src/annotations.dart","line":"85"},{"superclass":{"name":"Help","refId":"unscripted.src.util/Help"},"kind":"class","name":"Positional","id":"Positional","comment":"An annotation which marks required positional parameters as\npositional command line parameters.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"name","id":"name","comment":"The name to identify the parameter with in usage text.  By\ndefault the name of the dart parameter is used converted from camelCase\nto dash-erized.","line":"70"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isFinal":true,"kind":"variable","name":"parser","id":"parser","comment":"A function which validates and/or transforms the raw command-line String\nvalue into a form accepted by the [Script].  It should throw to indicate\nthat the argument is invalid.","line":"75"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"parser","id":"parser","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"arg","id":"arg","uri":"package:unscripted/src/annotations.dart","line":"77"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"initializedField":{"name":"name","refId":"unscripted/Positional/name"},"kind":"param","name":"name","id":"name"}],"line":"77"}],"uri":"package:unscripted/src/annotations.dart","line":"65"},{"superclass":{"name":"Help","refId":"unscripted.src.util/Help"},"kind":"class","name":"ArgExample","id":"ArgExample","comment":"An annotation which gives example arguments that can be passed to a\n[Command] or [SubCommand].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"example","id":"example","comment":"The example arguments.\n\nNote:  This should not include the name of the command or sub-command\nitself, just the arguments.","line":"58"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"example","refId":"unscripted/ArgExample/example"},"kind":"param","name":"example","id":"example"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"60"}],"uri":"package:unscripted/src/annotations.dart","line":"52"},{"superclass":{"name":"Option","refId":"unscripted/Option"},"kind":"class","name":"Flag","id":"Flag","comment":"An annotation which marks named method parameters as command line flags.\n\nSee the corresponding method parameters to [ArgParser.addFlag]\nfor descriptions of the fields.","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"negatable","id":"negatable","line":"38"},{"kind":"constructor","name":"","id":"5()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help","line":"41"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"abbr","id":"abbr","line":"42"},{"isOptional":true,"isNamed":true,"kind":"param","name":"defaultsTo","id":"defaultsTo","line":"43"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"hide","id":"hide","line":"44"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"negatable","id":"negatable","line":"45"}],"line":"40"}],"uri":"package:unscripted/src/annotations.dart","line":"37"},{"superclass":{"name":"Help","refId":"unscripted.src.util/Help"},"kind":"class","name":"Option","id":"Option","comment":"An annotation which marks named method parameters as command line options.\n\nSee the corresponding method parameters to [ArgParser.addOption]\nfor descriptions of the fields.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"abbr","id":"abbr","line":"9"},{"isFinal":true,"kind":"variable","name":"allowed","id":"allowed","comment":"Either a `List<String>` of allowed values, or `Map<String, String>` of\nallowed values to help text.","line":"12"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"allowMultiple","id":"allowMultiple","line":"13"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"hide","id":"hide","line":"14"},{"isFinal":true,"kind":"variable","name":"defaultsTo","id":"defaultsTo","line":"15"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isFinal":true,"kind":"variable","name":"parser","id":"parser","comment":"A function which validates and/or transforms the raw command-line String\nvalue into a form accepted by the [Script].  It should throw to indicate\nthat the argument is invalid.","line":"19"},{"kind":"constructor","name":"","id":"7()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help","line":"22"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"parser","id":"parser","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"arg","id":"arg","uri":"package:unscripted/src/annotations.dart","line":"23"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"23"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"initializedField":{"name":"abbr","refId":"unscripted/Option/abbr"},"kind":"param","name":"abbr","id":"abbr","line":"24"},{"isOptional":true,"isNamed":true,"initializedField":{"name":"allowed","refId":"unscripted/Option/allowed"},"kind":"param","name":"allowed","id":"allowed","line":"25"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"initializedField":{"name":"allowMultiple","refId":"unscripted/Option/allowMultiple"},"kind":"param","name":"allowMultiple","id":"allowMultiple","line":"26"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"initializedField":{"name":"hide","refId":"unscripted/Option/hide"},"kind":"param","name":"hide","id":"hide","line":"27"},{"isOptional":true,"isNamed":true,"initializedField":{"name":"defaultsTo","refId":"unscripted/Option/defaultsTo"},"kind":"param","name":"defaultsTo","id":"defaultsTo","line":"28"}],"line":"21"}],"uri":"package:unscripted/src/annotations.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Script","id":"Script","comment":"Represents a command-line script.\n\nThe main way to interact with a script is to [execute] it.","children":[{"kind":"method","name":"execute","id":"execute1()","comment":"Executes this script.\n\nFirst, the [arguments] are parsed.  If the arguments were invalid *or*\nif help was requested, help text is printed and the method returns.\nOtherwise, script-specific logic is executed on the successfully parsed\narguments.","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"arguments","id":"arguments"}],"line":"119"}],"uri":"package:unscripted/src/script.dart","line":"111"}],"uri":"package:unscripted/unscripted.dart","line":"4"}