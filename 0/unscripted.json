{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"package:unscripted/src/util.dart","id":"unscripted.src.util","children":[{"superclass":{"name":"Help","refId":"unscripted.src.util/Help"},"kind":"class","name":"BaseCommand","id":"BaseCommand","children":[{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"28"}],"line":"27"},{"superclass":{"name":"Help","refId":"unscripted.src.util/Help"},"kind":"class","name":"Arg","id":"Arg","comment":"A base class for script argument annotations.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"abbr","id":"abbr","line":"22"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"initializedField":{"name":"abbr","refId":"unscripted.src.util/Arg/abbr"},"kind":"param","name":"abbr","id":"abbr"}],"line":"24"}],"line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Help","id":"Help","comment":"A base class for script annotations which include help.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"help","id":"help","comment":"The help text to include for this part of the command line interface.","line":"15"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"initializedField":{"name":"help","refId":"unscripted.src.util/Help/help"},"kind":"param","name":"help","id":"help"}],"line":"17"}],"line":"13"}],"uri":"package:unscripted/src/util.dart","line":"2"}],"kind":"library","name":"package:unscripted/unscripted.dart","id":"unscripted","comment":"Design command line interfaces through normal programming interfaces\nannotated with command line specific metadata.","children":[{"returnType":{"name":"Script","refId":"unscripted/Script"},"kind":"method","name":"improvise","id":"improvise1()","comment":"Derives and returns a [Script] from [model].\n\nThe model is either a\nclosure ([Function]) or class ([Type]), annotated with command line\ninterface metadata.  The model itself can be annotated as a [Command].  The\nreturned script automatically includes '--help' / '-h' flags, and\nprints help information when these flags are passed, or when the script was\ninvoked incorrectly.\n\nFor scripts without sub-commands, the model should be a [Function].\nThe function's parameters define the script's command line parameters.\nNamed parameters with [bool] type annotations or [Flag] metadata annotations\nare considered flags.  Named parameters with [String] or [dynamic] type\nannotations or [Option] metadata annotations are considered options.\nRequired positional parameters are mapped to positional command line\nparameters.  Optional positional parameters are not allowed.  However, a\n[Rest] metadata annotation can be placed on the last positional parameter\nto represent all remaining positional arguments passed to the script.\n\nWhen the returned script is [executed][Script.execute], the command line\narguments are injected into their corresponding function arguments.\n\n    main(arguments) => improvise(greet).execute(arguments);\n\n    // Optional command-line metadata:\n    @Command(help: 'Outputs a greeting')\n    @ArgExample('--salutation Welcome --exclaim Bob', help: 'enthusiastic')\n    greet(\n        @Rest(help: \"Name(s) to greet\")\n        List<String> who, // A rest parameter, must be last positional.\n        {String salutation : 'Hello', // An option, use `@Option(...)` for metadata.\n         bool exclaim : false}) { // A flag, use `@Flag(...)` for metadata.\n\n      print('$salutation ${who.join(' ')}${exclaim ? '!' : ''}');\n\n    }\n\nFor scripts with sub-commands, the model must be a class ([Type]), which\nmust have an unnamed constructor, whose parameters define the\ntop-level options for the script.  Methods of the class can be annotated\nas [SubCommand]s.  These methods define and implement the sub-commands\nof the script.  A 'help' sub-command is also added which can be invoked bare\nor with the name of a sub-command for which to print help.\n\nWhen the returned script is [executed][Script.execute], the global command\nline arguments are injected into their corresponding constructor arguments\nto create an instance of the class.  Then, the method corresponding to the\nsub-command and associated arguments that were specified on the command line\nare used to invoke the corresponding method on the instance which will have\naccess to any global options through instance variables that were set in\nthe constructor.\n\n    main(arguments) => improvise(Server).execute(arguments);\n\n    @Command(help: 'Manages a server')\n    class Server {\n\n      final String configPath;\n\n      Server({this.configPath: 'config.xml'});\n\n      @SubCommand(help: 'Start the server')\n      start({bool clean}) {\n        print('''\n    Starting the server.\n    Config path: $configPath''');\n      }\n\n      @SubCommand(help: 'Stop the server')\n      stop() {\n        print('Stopping the server.');\n      }\n\n    }\n\nCommands and SubCommands can also be annotated with [ArgExample]s, to\ndocument in the help text example arguments that they can receive.\n\nParameter and command names which are camelCased are mapped to their\ndash-erized command line equivalents.  For example, `fooBar` would map to\n`foo-bar`.","children":[{"kind":"param","name":"model","id":"model"}],"uri":"package:unscripted/src/script.dart","line":"85"},{"superclass":{"name":"UsageFormatter","refId":"unscripted/UsageFormatter"},"kind":"class","name":"TerminalUsageFormatter","id":"TerminalUsageFormatter","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format","id":"format0()","line":"18"},{"kind":"method","name":"_formatExample","id":"_formatExample1()","children":[{"ref":{"name":"ArgExample","refId":"unscripted/ArgExample"},"kind":"param","name":"example","id":"example"}],"isPrivate":true,"line":"78"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_formatRootCommand","id":"_formatRootCommand0()","isPrivate":true,"line":"86"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_formatCommands","id":"_formatCommands0()","isPrivate":true,"line":"91"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_formatBlock","id":"_formatBlock2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"title","id":"title"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"content","id":"content"}],"isPrivate":true,"line":"94"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Usage","refId":"unscripted/Usage"},"kind":"param","name":"usage","id":"usage"}],"line":"16"}],"uri":"package:unscripted/src/usage_formatter.dart","line":"14"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"UsageFormatter","id":"UsageFormatter","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"format","id":"format0()","line":"8"},{"ref":{"name":"Usage","refId":"unscripted/Usage"},"isFinal":true,"kind":"variable","name":"usage","id":"usage","line":"6"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Usage","refId":"unscripted/Usage"},"initializedField":{"name":"usage","refId":"unscripted/UsageFormatter/usage"},"kind":"param","name":"usage","id":"usage"}],"line":"10"}],"uri":"package:unscripted/src/usage_formatter.dart"},{"superclass":{"name":"Usage","refId":"unscripted/Usage"},"kind":"class","name":"_SubCommandUsage","id":"_SubCommandUsage","children":[{"returnType":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"method","name":"_getParser","id":"_getParser0()","isPrivate":true,"line":"125"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"kind":"property","name":"callStyle","id":"callStyle","line":"113"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"commandPath","id":"commandPath","line":"118"},{"ref":{"name":"Usage","refId":"unscripted/Usage"},"isFinal":true,"kind":"variable","name":"parent","id":"parent","line":"110"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_subCommandName","id":"_subCommandName","isPrivate":true,"line":"111"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"_path","id":"_path","isPrivate":true,"line":"117"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Usage","refId":"unscripted/Usage"},"initializedField":{"name":"parent","refId":"unscripted/_SubCommandUsage/parent"},"kind":"param","name":"parent","id":"parent"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_subCommandName","refId":"unscripted/_SubCommandUsage/_subCommandName"},"kind":"param","name":"_subCommandName","id":"_subCommandName","isPrivate":true}],"line":"115"}],"isPrivate":true,"uri":"package:unscripted/src/usage.dart","line":"108"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Usage","id":"Usage","comment":"Adds a standard --help (-h) option to [parser].\nIf [parser] has any sub-commands also add a help sub-command,\nand recursively add help to all sub-commands' parsers.","children":[{"returnType":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"method","name":"_getParser","id":"_getParser0()","isPrivate":true,"line":"26"},{"kind":"method","name":"addPositional","id":"addPositional2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"32"},{"kind":"method","name":"_addHelpFlag","id":"_addHelpFlag1()","children":[{"ref":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"param","name":"parser","id":"parser"}],"isPrivate":true,"line":"45"},{"kind":"method","name":"addExample","id":"addExample1()","children":[{"ref":{"name":"ArgExample","refId":"unscripted/ArgExample"},"kind":"param","name":"example","id":"example"}],"line":"60"},{"returnType":{"name":"Usage","refId":"unscripted/Usage"},"kind":"method","name":"addCommand","id":"addCommand1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"64"},{"returnType":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"method","name":"validate","id":"validate1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"arguments","id":"arguments"}],"line":"74"},{"kind":"method","name":"_checkResults","id":"_checkResults1()","children":[{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"param","name":"results","id":"results"}],"isPrivate":true,"line":"82"},{"ref":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"property","name":"parser","id":"parser","comment":"The parser associated with this usage.","line":"20"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Positional","refId":"unscripted/Positional"}]},"kind":"property","name":"positionals","id":"positionals","line":"38"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"commandPath","id":"commandPath","line":"56"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"description","id":"description","comment":"A simple description of what this script does, for use in help text.","line":"10"},{"ref":{"name":"Rest","refId":"unscripted/Rest"},"kind":"variable","name":"rest","id":"rest","line":"12"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"kind":"variable","name":"callStyle","id":"callStyle","line":"14"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_allowTrailingOptions","id":"_allowTrailingOptions","isPrivate":true,"line":"17"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Positional","refId":"unscripted/Positional"}]},"kind":"variable","name":"_positionals","id":"_positionals","isPrivate":true,"line":"36"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Positional","refId":"unscripted/Positional"}]},"kind":"variable","name":"_positionalsView","id":"_positionalsView","isPrivate":true,"line":"37"},{"ref":{"name":"ArgParser","refId":"args/ArgParser"},"kind":"variable","name":"_parser","id":"_parser","isPrivate":true,"line":"52"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"ArgExample","refId":"unscripted/ArgExample"}]},"kind":"variable","name":"examples","id":"examples","line":"57"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Usage","refId":"unscripted/Usage"}]},"kind":"variable","name":"commands","id":"commands","line":"58"},{"kind":"constructor","name":"","id":"0()","line":"54"}],"uri":"package:unscripted/src/usage.dart","line":"7"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"CallStyle","id":"CallStyle","comment":"How the command is called on the command line.","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"formatCommand","id":"formatCommand1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"command","id":"command"}],"line":"27"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"37"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"_example","id":"_example","isPrivate":true,"line":"35"},{"isStatic":true,"kind":"variable","name":"_EXAMPLE_COMMAND","id":"_EXAMPLE_COMMAND","isPrivate":true,"line":"7"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_name","id":"_name","isPrivate":true,"line":"9"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isStatic":true,"kind":"variable","name":"NORMAL","id":"NORMAL","comment":"Called with the dart executable.\nExample:\n    dart foo.dart ...","line":"14"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isStatic":true,"kind":"variable","name":"SHEBANG","id":"SHEBANG","comment":"Called without the dart executable, such as by including a shebang\nat the beginning of the script.\nExample:\n    foo.dart ...","line":"19"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isStatic":true,"kind":"variable","name":"SHELL","id":"SHELL","comment":"Called without the '.dart' file extension, similar to a shell command.\nExample:\n    foo ...","line":"23"},{"kind":"constructor","name":"_","id":"_1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_name","refId":"unscripted/CallStyle/_name"},"kind":"param","name":"_name","id":"_name","isPrivate":true}],"isPrivate":true,"line":"25"}],"uri":"package:unscripted/src/call_style.dart","line":"5"},{"superclass":{"name":"BaseCommand","refId":"unscripted.src.util/BaseCommand"},"kind":"class","name":"SubCommand","id":"SubCommand","comment":"An annotation which marks an instance method of a [Command] as a\nsub-command.","children":[{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"86"}],"uri":"package:unscripted/src/annotations.dart","line":"85"},{"superclass":{"name":"BaseCommand","refId":"unscripted.src.util/BaseCommand"},"kind":"class","name":"Command","id":"Command","comment":"An annotation which marks a class as representing a script command.","children":[{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isFinal":true,"kind":"variable","name":"callStyle","id":"callStyle","line":"78"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"},{"ref":{"name":"CallStyle","refId":"unscripted/CallStyle"},"isOptional":true,"isNamed":true,"initializedField":{"name":"callStyle","refId":"unscripted/Command/callStyle"},"kind":"param","name":"callStyle","id":"callStyle"}],"line":"80"}],"uri":"package:unscripted/src/annotations.dart","line":"77"},{"superclass":{"name":"Positional","refId":"unscripted/Positional"},"kind":"class","name":"Rest","id":"Rest","comment":"An annotation which marks the last positional parameter of a method\nas a rest argument.  If the parameter has a type annotation,\nit should be `List` or `List<String>`.","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"min","id":"min","comment":"The minimum amount of arguments that should be passed to the rest\nparameter to avoid an error being thrown.","line":"70"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"isNamed":true,"initializedField":{"name":"min","refId":"unscripted/Rest/min"},"kind":"param","name":"min","id":"min"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"72"}],"uri":"package:unscripted/src/annotations.dart","line":"66"},{"superclass":{"name":"Help","refId":"unscripted.src.util/Help"},"kind":"class","name":"Positional","id":"Positional","comment":"An annotation which marks required positional parameters as\npositional command line parameters.","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"name","id":"name","comment":"The name with which to identify the parameter to in usage text.  By\ndefault the name of the dart parameter is used converted from camelCase\nto dash-erized.","line":"58"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"initializedField":{"name":"name","refId":"unscripted/Positional/name"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"60"}],"uri":"package:unscripted/src/annotations.dart","line":"53"},{"superclass":{"name":"Help","refId":"unscripted.src.util/Help"},"kind":"class","name":"ArgExample","id":"ArgExample","comment":"An annotation which gives example arguments that can be passed to a\n[Command] or [SubCommand].","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"example","id":"example","comment":"The example arguments.\n\nNote:  This should not include the name of the command or sub-command\nitself, just the arguments.","line":"46"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"example","refId":"unscripted/ArgExample/example"},"kind":"param","name":"example","id":"example"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help"}],"line":"48"}],"uri":"package:unscripted/src/annotations.dart","line":"40"},{"superclass":{"name":"Arg","refId":"unscripted.src.util/Arg"},"kind":"class","name":"Flag","id":"Flag","comment":"An annotation which marks named method parameters as command line flags.\n\nSee the corresponding method parameters to [ArgParser.addFlag]\nfor descriptions of the fields.","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"negatable","id":"negatable","line":"29"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help","line":"32"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"abbr","id":"abbr","line":"33"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"initializedField":{"name":"negatable","refId":"unscripted/Flag/negatable"},"kind":"param","name":"negatable","id":"negatable","line":"34"}],"line":"31"}],"uri":"package:unscripted/src/annotations.dart","line":"28"},{"superclass":{"name":"Arg","refId":"unscripted.src.util/Arg"},"kind":"class","name":"Option","id":"Option","comment":"An annotation which marks named method parameters as command line options.\n\nSee the corresponding method parameters to [ArgParser.addOption]\nfor descriptions of the fields.","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"allowed","id":"allowed","line":"9"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"allowedHelp","id":"allowedHelp","line":"10"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"allowMultiple","id":"allowMultiple","line":"11"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"hide","id":"hide","line":"12"},{"kind":"constructor","name":"","id":"6()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"help","id":"help","line":"15"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"abbr","id":"abbr","line":"16"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"initializedField":{"name":"allowed","refId":"unscripted/Option/allowed"},"kind":"param","name":"allowed","id":"allowed","line":"17"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"initializedField":{"name":"allowedHelp","refId":"unscripted/Option/allowedHelp"},"kind":"param","name":"allowedHelp","id":"allowedHelp","line":"18"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"initializedField":{"name":"allowMultiple","refId":"unscripted/Option/allowMultiple"},"kind":"param","name":"allowMultiple","id":"allowMultiple","line":"19"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"initializedField":{"name":"hide","refId":"unscripted/Option/hide"},"kind":"param","name":"hide","id":"hide","line":"20"}],"line":"14"}],"uri":"package:unscripted/src/annotations.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Script","id":"Script","comment":"Represents a command line script.\n\nThe main way to interact with a [Script] is to [execute] it.\n\n\n","children":[{"returnType":{"name":"UsageFormatter","refId":"unscripted/UsageFormatter"},"kind":"method","name":"getUsageFormatter","id":"getUsageFormatter1()","children":[{"ref":{"name":"Usage","refId":"unscripted/Usage"},"kind":"param","name":"usage","id":"usage"}],"line":"101"},{"kind":"method","name":"execute","id":"execute1()","comment":"Executes this script.\n\n* Parses the [arguments].\n* Outputs help info and exits if:\n  * The arguments were invalid\n  * Help was requested via any of:\n    * `foo.dart --help`\n    * `foo.dart -h`\n    * `foo.dart help`\n    * `foo.dart command --help`\n    * `foo.dart help command`\n* Otherwise, passes the [ArgResults] to [handleResults].","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"arguments","id":"arguments"}],"line":"116"},{"kind":"method","name":"handleResults","id":"handleResults1()","comment":"Handles successfully parsed [results].","children":[{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"param","name":"results","id":"results"}],"line":"134"},{"kind":"method","name":"printHelp","id":"printHelp1()","comment":"Prints help information for the associated command or sub-command thereof\nat [commandPath].","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"kind":"param","name":"commandPath","id":"commandPath"}],"line":"139"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_checkHelp","id":"_checkHelp1()","children":[{"ref":{"name":"ArgResults","refId":"args/ArgResults"},"kind":"param","name":"results","id":"results"}],"isPrivate":true,"line":"146"},{"ref":{"name":"Usage","refId":"unscripted/Usage"},"kind":"property","name":"usage","id":"usage","line":"99"}],"uri":"package:unscripted/src/script.dart","line":"97"}],"uri":"package:unscripted/unscripted.dart","line":"4"}